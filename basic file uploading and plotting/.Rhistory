shiny::runApp('F:/PRATIK/basic file uploading and plotting')
######Yearwise pie chart
library(plotly)
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
b <- subset( a, Year=="2016")
head(b)
p <- plot_ly(b, labels = ~Location,  type = 'pie') %>%
layout(title = 'United States Personal Expenditures by Categories in 1960',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
library(plotly)
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
b <- subset( a, Company_name=="Maruti Suzuki")
l <- b[,c(11,13)]
head(l)
d <- aggregate(l,list(Model_Name=b$Model_Name), mean)
head(b)
print(b)
p <- plot_ly(d, x = ~Model_Name, y = ~Power_Bhp, type = 'bar', name = 'Power_Bhp')%>%
add_trace(d, x = ~Model_Name, y = ~Mileage_Kmpl,type = 'scatter', mode = 'lines+markers',name = 'Mileage_Kmpl')%>%
layout( title = "Average Power(Bhp) and mileage(Kmpl) Across Models ",
xaxis = list(title = "Model_Name"), yaxis = list(title = "Average Power(Bhp) and mileage(Kmpl)")
)
ggplotly(p)
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
library(plotly)
#Loading a dataset
a <- read.csv(file="F:\\PRATIK\\basic file uploading and plotting\\cardata.csv")
runApp('F:/PRATIK/basic file uploading and plotting')
library(plotly)
#Loading a dataset
a <- read.csv(file="F:\\PRATIK\\basic file uploading and plotting\\cardata.csv")
# Subset the attitude data
dat = a[,c(11,12)]
# Plot subset data
plot(dat, main = "% of favourable responses to
Learning and Privilege", pch =20, cex =2)
mydata <- dat
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares",
main="Assessing the Optimal Number of Clusters with the Elbow Method",
pch=20, cex=2)
# Perform K-Means with the optimal number of clusters identified from the Elbow method
set.seed(5)
km2 = kmeans(dat, 5, nstart=100)
# Examine the result of the clustering algorithm
km2
# Plot results
plot(dat, col =(km2$cluster +1) ,
main="K-Means result with 6 clusters", pch=20, cex=2)
runApp('F:/PRATIK/basic file uploading and plotting')
install.packages("factoextra")
install.packages("factoextra")
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
######clustering 18/9/2018
a <- read.csv("F:\\PRATIK\\cardata")
######clustering 18/9/2018
a <- read.csv(file="F:\\PRATIK\\cardata")
cardata <- read.csv(file="F:\\PRATIK\\cardata.csv")
######clustering 18/9/2018
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
head(a)
dat <- a %>% filter(a$Company_name == "Company_name" ) %>% select(Model_Name,Year,Kilometers_Driven)
print(dat)
d <- data.matrix(dat[-1])
d1<- na.omit(d)
d2 <- scale(d1)
#set.seed(123)
final <- kmeans(d2,3)
print(final)
fviz_cluster(final,data = d2)
######clustering 18/9/2018
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
dat <- a %>% filter(a$Company_name == "Company_name" ) %>% select(Model_Name,Year,Kilometers_Driven,Mileage_Kmpl)
print(dat)
d <- data.matrix(dat[-1])
d1<- na.omit(d)
d2 <- scale(d1)
#set.seed(123)
final <- kmeans(d2,3)
print(final)
fviz_cluster(final,data = d2)
######clustering 18/9/2018
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
head(a)
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Model_Name,Year,Kilometers_Driven)
d <- data.matrix(dat[-1])
d1<- na.omit(d)
d2 <- scale(d1)
#set.seed(123)
final <- kmeans(d2,3)
print(final)
fviz_cluster(final,data = d2)
print(cbind(dat,final$cluster))
######clustering 18/9/2018
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
head(a)
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Model_Name,Year,Kilometers_Driven)
print(dat)
d <- data.matrix(dat[-1])
d1<- na.omit(d)
#set.seed(123)
final <- kmeans(d1,3)
print(final)
fviz_cluster(final,data = d2)
######clustering 18/9/2018
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
head(a)
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Model_Name,Year,Kilometers_Driven)
print(dat)
d <- data.matrix(dat[-1])
d1<- na.omit(d)
#set.seed(123)
final <- kmeans(d1,3)
print(final)
fviz_cluster(final,data = d2)
###try 18/9
library(dplyr)
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Model_Name,Mileage_Kmpl,Engine_Cc,Power_Bhp)
d <- data.matrix(dat[-1])
d1<- na.omit(d)
glimpse(d1)
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Model_Name,Mileage_Kmpl,Engine_Cc,Power_Bhp)
d <- data.matrix(dat[-1])
glimpse(d)
print(d)
d1<- na.omit(d)
print(d1)
glimpse(d1)
str(d1)
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Mileage_Kmpl,Engine_Cc,Power_Bhp)
# d <- data.matrix(dat[-1])
# print(d)
# d1<- na.omit(d)
# print(d1)
# str(d1)
glimpse(dat)
summary(dat)
rescale_dat <- dat % > %
mutate(Mileage_Kmpl_scal = scale(Mileage_Kmpl),
Engine_Cc_scal = scale(Engine_Cc),
Power_Bhp_scal = scale(Power_Bhp)) % > %
select(-c(Mileage_Kmpl, Engine_Cc, Power_Bhp))
rescale_dat <- dat %>%
mutate(Mileage_Kmpl_scal = scale(Mileage_Kmpl),
Engine_Cc_scal = scale(Engine_Cc),
Power_Bhp_scal = scale(Power_Bhp)) % > %
select(-c(Mileage_Kmpl, Engine_Cc, Power_Bhp))
###try 18/9
library(dplyr)
install.packages("magrittr")
library("magrittr")
rescale_dat <- dat %>%
mutate(Mileage_Kmpl_scal = scale(Mileage_Kmpl),
Engine_Cc_scal = scale(Engine_Cc),
Power_Bhp_scal = scale(Power_Bhp)) % > %
select(-c(Mileage_Kmpl, Engine_Cc, Power_Bhp))
rescale_dat <- dat %>%
mutate(Mileage_Kmpl_scal = scale(Mileage_Kmpl),
Engine_Cc_scal = scale(Engine_Cc),
Power_Bhp_scal = scale(Power_Bhp)) %>%
select(-c(Mileage_Kmpl, Engine_Cc, Power_Bhp))
install.packages("animation")
##install.packages("animation")
library(animation)
kmeans.ani(rescale_dat[2:3], 3)
kmeans.ani(rescale_dat[2:3], 3)
pc_cluster <-kmeans(rescale_dat, 5)
pc_cluster <-kmeans(rescale_dat, 5)
kmean_withinss <- function(k) {
cluster <- kmeans(rescale_dat, k)
return (cluster$tot.withinss)
}
kmean_withinss(2)
# Set maximum cluster
max_k <-20
# Run algorithm over a range of k
wss <- sapply(2:max_k, kmean_withinss)
# Create a data frame to plot the graph
elbow <-data.frame(2:max_k, wss)
# Plot the graph with gglop
ggplot(elbow, aes(x = X2.max_k, y = wss)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = seq(1, 20, by = 1))
pc_cluster_2 <-kmeans(rescale_df, 5)
pc_cluster_2 <-kmeans(rescale_dat, 5)
pc_cluster_2$cluster
pc_cluster_2$centers
pc_cluster_2$size
pc_cluster_2
pc_cluster_2$size
center <-pc_cluster_2$centers
center
cluster <- c(1: 3)
center_df <- data.frame(cluster, center)
cluster <- c(1:3)
center_df <- data.frame(cluster, center)
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Model_Name,Mileage_Kmpl,Engine_Cc,Power_Bhp)
d <- data.matrix(dat[-1])
print(d)
d1<- na.omit(d)
print(d1)
str(d1)
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Model_Name,Mileage_Kmpl,Engine_Cc,Power_Bhp)
d1<- na.omit(Model_Name)
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Mileage_Kmpl,Engine_Cc,Power_Bhp)
str(dat)
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Mileage_Kmpl,Engine_Cc,Power_Bhp)
crime <- data.matrix (dat)
str(crime)
cl <- kmeans(dat, 5)
class(cl)
str(cl)
kmeans.wss.k <- function(dat, k){
km = kmeans(dat, k)
return (km$tot.withinss)
}
kmeans.wss.k(dat,5)
kmeans.wss.k(dat,10)
kmeans.dis <- function(dat, maxk){
+ dis=(nrow(dat)-1)*sum(apply(dat,2,var))
+ dis[2:maxk]=sapply (2:maxk, kmeans.wss.k, dat=dat)
+ return(dis)
+ }
runApp('F:/PRATIK/basic file uploading and plotting')
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Location,Mileage_Kmpl,Engine_Cc,Power_Bhp)
str(dat)
head(dat)
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
rawdf <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Location,Mileage_Kmpl,Engine_Cc,Power_Bhp)
str(rawdf)
head(rawdf)
desc_stats <- data.frame(
Min = apply(rawdf, 2, min), # minimum
Med = apply(rawdf, 2, median), # median
Mean = apply(rawdf, 2, mean), # mean
SD = apply(rawdf, 2, sd), # Standard deviation
Max = apply(rawdf, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(rawdf)
head(df)
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
rawdf <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Mileage_Kmpl,Engine_Cc,Power_Bhp)
str(rawdf)
head(rawdf)
desc_stats <- data.frame(
Min = apply(rawdf, 2, min), # minimum
Med = apply(rawdf, 2, median), # median
Mean = apply(rawdf, 2, mean), # mean
SD = apply(rawdf, 2, sd), # Standard deviation
Max = apply(rawdf, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(rawdf)
head(df)
set.seed(123)
km.res <- kmeans(scale(rawdf), 4, nstart = 25)
km.res
aggregate(rawdf, by=list(cluster=km.res$cluster), mean)
library("factoextra")
fviz_cluster(km.res, data = df,
palette = c("#00AFBB","#2E9FDF", "#E7B800", "#FC4E07"),
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
rawdf <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Mileage_Kmpl,Engine_Cc,Power_Bhp)
str(rawdf)
head(rawdf)
desc_stats <- data.frame(
Min = apply(rawdf, 2, min), # minimum
Med = apply(rawdf, 2, median), # median
Mean = apply(rawdf, 2, mean), # mean
SD = apply(rawdf, 2, sd), # Standard deviation
Max = apply(rawdf, 2, max) # Maximum
)
desc_stats <- round(desc_stats, 1)
head(desc_stats)
df <- scale(rawdf)
head(df)
set.seed(123)
km.res <- kmeans(scale(rawdf), 4, nstart = 25)
km.res
aggregate(rawdf, by=list(cluster=km.res$cluster), mean)
fviz_cluster(km.res, data = df,
palette = c("#00AFBB","#2E9FDF", "#E7B800", "#FC4E07"),
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
runApp('F:/PRATIK/basic file uploading and plotting')
data("USArrests")
head(data)
p<-data("USArrests")
head(p)
data("USArrests")      # Loading the data set
df <- scale(USArrests) # Scaling the data
# View the firt 3 rows of the data
head(df, n = 3)
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
rawdf <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Model_Name,Location,Mileage_Kmpl,Engine_Cc,Power_Bhp)
str(rawdf)
head(rawdf)
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
###new
a <- read.csv(file="F:\\PRATIK\\cardata.csv")
dat <- a %>% filter(a$Company_name == 'Maruti Suzuki' ) %>% select(Model_Name,Location,Mileage_Kmpl,Engine_Cc,Power_Bhp)
print(dat)
d <- data.matrix(dat[-1])
d1<- na.omit(d)
d2 <- scale(d1)
mydata <- d2
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(mydata,
centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares",
main="Assessing the Optimal Number of Clusters with the Elbow Method",
pch=20, cex=2)
km2 = kmeans(dat, 4, nstart=100)
km2 = kmeans(d2, 4, nstart=100)
# Examine the result of the clustering algorithm
km2
# Plot results
plot(dat, col =(km2$cluster +1) ,
main="K-Means result with 6 clusters", pch=20, cex=2)
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
shiny::runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
runApp('F:/PRATIK/basic file uploading and plotting')
